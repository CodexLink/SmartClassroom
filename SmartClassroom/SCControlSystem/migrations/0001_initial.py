# Generated by Django 3.0.2 on 2020-01-28 11:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Classroom_Name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(50)])),
                ('Classroom_Building', models.PositiveIntegerField(choices=[(1, 'Building 1'), (2, 'Building 2'), (3, 'Building 3'), (4, 'Building 4'), (5, 'Building 5'), (6, 'Building 6'), (7, 'Building 7'), (8, 'Building 8'), (9, 'Building 9'), (10, 'PE CNTR 1'), (11, 'PE CNTR 2')], default=(1, 'Building 1'))),
                ('Classroom_Floor', models.PositiveIntegerField(choices=[(1, 'Ground Floor'), (2, '2nd Floor'), (3, '3rd Floor'), (4, '4th Floor'), (5, '5th Floor')], default=(1, 'Ground Floor'))),
                ('Classroom_Number', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(29)])),
                ('Classroom_Type', models.CharField(choices=[('Technological Only', 'Technological Only'), ('Laboratory Only', 'Laboratory Only'), ('External Only', 'External Only'), ('Technological and Laboratory', 'Technological and Laboratory'), ('Technological and External', 'Technological and External'), ('Laboratory and Technological', 'Technological and Laboratory'), ('Laboratory and External', 'External and Laboratory')], default=('Technological Only', 'Technological Only'), max_length=29, validators=[django.core.validators.MinLengthValidator(13), django.core.validators.MaxLengthValidator(29)])),
                ('Classroom_CompleteString', models.CharField(blank=True, help_text='This field will be automatically filled when you submit it. Putting any value will result to it, discarded.', max_length=6, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(6)])),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('Course_Name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100)])),
                ('Course_Code', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.MaxLengthValidator(10)])),
                ('Course_Units', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('Course_Capacity', models.PositiveIntegerField(default=15, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(60)])),
                ('Course_Type', models.CharField(choices=[('Technological Only', 'Technological Only'), ('Laboratory Only', 'Laboratory Only'), ('External Only', 'External Only'), ('Technological and Laboratory', 'Technological and Laboratory'), ('Technological and External', 'Technological and External'), ('Laboratory and Technological', 'Technological and Laboratory'), ('Laboratory and External', 'External and Laboratory')], default=('Technological Only', 'Technological Only'), max_length=29, validators=[django.core.validators.MinLengthValidator(13), django.core.validators.MaxLengthValidator(29)])),
            ],
        ),
        migrations.CreateModel(
            name='ProgramBranch',
            fields=[
                ('ProgramBranch_Code', models.CharField(choices=[('ARch', 'Architecture'), ('CE', 'Civil Engineering'), ('CpE', 'Computer Engineering'), ('EE', 'Electrical Engineering'), ('ECE', 'Electronics Engineering'), ('EnSE', 'Environment and Sanitary Engineering'), ('IE', 'Industrial Engineering'), ('ME', 'Mechanical Engineering')], max_length=4, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(4)])),
            ],
        ),
        migrations.CreateModel(
            name='CourseSchedule',
            fields=[
                ('CourseSchedule_CourseCode', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='SCControlSystem.Course')),
                ('CourseSchedule_Instructor', models.CharField(max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.MaxLengthValidator(50)])),
                ('CourseSchedule_LectureDay_Tech', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesdy', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], default=('Monday', 'Monday'), max_length=9, unique=True, validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(9)])),
                ('CourseSchedule_SessionStart_Tech', models.TimeField(blank=True, null=True, unique=True)),
                ('CourseSchedule_SessionEnd_Tech', models.TimeField(blank=True, null=True)),
                ('CourseSchedule_LectureDay_Lab', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesdy', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], default=('Monday', 'Monday'), max_length=9, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(9)])),
                ('CourseSchedule_SessionStart_Lab', models.TimeField(blank=True, null=True)),
                ('CourseSchedule_SessionEnd_Lab', models.TimeField(blank=True, null=True)),
                ('CourseSchedule_LectureDay_Ext', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesdy', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], default=('Monday', 'Monday'), max_length=9, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(9)])),
                ('CourseSchedule_SessionStart_Ext', models.TimeField(blank=True, null=True)),
                ('CourseSchedule_SessionEnd_Ext', models.TimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserDataCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middleName', models.CharField(blank=True, max_length=20, null=True)),
                ('uniqueId', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('commonId', models.CharField(default='C8C2TMu77QUo7E48C8tyv1IxItulvEv4', max_length=32)),
                ('role', models.CharField(choices=[('Project Owner', 'Project Owner'), ('Project Members', 'Project Members'), ('ITSO Administrator', 'ITSO Administrator'), ('ITSO Assitant Administrator', 'ITSO Assitant Administrator'), ('ITSO Supervisor', 'ITSO Supervisor'), ('Department Staff', 'Department Staff'), ('Teacher Staff', 'Teacher Staff'), ('Student Staff', 'Student Staff')], default=('Project Owner', 'Project Owner'), max_length=27)),
                ('lastCreated', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SectionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Section_Year', models.PositiveIntegerField(choices=[(1, '1st Year'), (2, '2nd Year'), (3, '3rd Year'), (4, '4th Year'), (5, '5th Year')])),
                ('Section_Semester', models.PositiveIntegerField(choices=[(1, '1st Semester'), (2, '2nd Semester')])),
                ('Section_SubUniqueGroup', models.CharField(choices=[('FA1', 'FA1'), ('FA2', 'FA2'), ('FA3', 'FA3'), ('FA4', 'FA4'), ('FA5', 'FA5'), ('FA6', 'FA6'), ('FA7', 'FA7'), ('FA8', 'FA8'), ('FA9', 'FA9'), ('FB1', 'FB1'), ('FB2', 'FB2'), ('FB3', 'FB3'), ('FB4', 'FB4'), ('FB5', 'FB5'), ('FB6', 'FB6'), ('FB7', 'FB7'), ('FB8', 'FB8'), ('FB9', 'FB9'), ('FC1', 'FC1'), ('FC2', 'FC2'), ('FC3', 'FC3'), ('FC4', 'FC4'), ('FC5', 'FC5'), ('FC6', 'FC6'), ('FC7', 'FC7'), ('FC8', 'FC8'), ('FC9', 'FC9')], max_length=3, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(3)])),
                ('Section_CompleteStringGroup', models.CharField(max_length=10, unique=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(5)])),
                ('Section_Program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SCControlSystem.ProgramBranch')),
            ],
        ),
        migrations.CreateModel(
            name='ClassroomActionLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UserActionTaken', models.CharField(choices=[('Opened Classroom', 'Opened Classroom'), ('Closed Classroom', 'Closed Classroom'), ('Action: Automatically Set as Open on Time', 'Action: Automatically Set as Open on Time'), ('Action: Automatically Set as Closed on Time', 'Action: Automatically Set as Closed on Time'), ('Authorized Staff Entry', 'Authorized Staff Entry'), ('Authorized Teacher Entry', 'Authorized Teacher Entry'), ('Disabled Access Entry', 'Disabled Access Entry'), ('Enabled Access Entry', 'Enabled Access Entry'), ('Classroom Access is set to Disabled.', 'Classroom Access is set to Disabled.'), ('Classroom Access is Disabled.', 'Classroom Access is Disabled.'), ('Forbidden Attempt To Entry Detected.', 'Forbidden Attempt To Entry Detected.'), ('Unauthorized Access Detected.', 'Unauthorized Access Detected.')], max_length=255)),
                ('LectureTimeStart_Reference', models.TimeField()),
                ('LectureTimeEnd_Reference', models.TimeField()),
                ('ClassRoom_Reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='RoomClassReference', to='SCControlSystem.Classroom', to_field='Classroom_CompleteString')),
                ('Section_Reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='StudentGroupAssociate', to='SCControlSystem.SectionGroup', to_field='Section_CompleteStringGroup')),
                ('ClassInstructor_Reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='InstructorAssociate', to='SCControlSystem.CourseSchedule', to_field='CourseSchedule_Instructor')),
                ('Course_Reference', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='CourseAssociated', to='SCControlSystem.CourseSchedule')),
            ],
        ),
    ]
