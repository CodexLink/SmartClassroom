# Generated by Django 3.0.3 on 2020-02-08 16:26

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('SCControlSystem', '0004_auto_20200207_2334'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Device_Unique_ID', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A Unique Identifier for the Device. This is used classroom assignment unique identity of the device.', unique=True, verbose_name='Device Unique ID')),
                ('Device_IP_Address', models.GenericIPAddressField(protocol='ipv4')),
                ('Device_Name', models.CharField(help_text='Please indicate. We need to know what kind of device is it gonna be to communicate with the app.', max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100)], verbose_name='Device Name')),
                ('Device_Description', models.CharField(help_text='Please indicate. We need to know more information about the device that wants to communicate with the app.', max_length=255, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(255)], verbose_name='Device Description')),
                ('Device_Type', models.CharField(choices=[('Digital Device', 'Digital Device'), ('Analog Device', 'Analog Device'), ('Security Device', 'Security Device')], default=('Digital Device', 'Digital Device'), help_text='The type of the device. This needs to be indicated to properly identify what kind of output it returns.', max_length=29, validators=[django.core.validators.MinLengthValidator(13), django.core.validators.MaxLengthValidator(15)], verbose_name='Device Type')),
            ],
            options={
                'verbose_name': 'Classroom Device Information',
                'db_table': 'dev_decl',
            },
        ),
        migrations.AlterModelOptions(
            name='classroom',
            options={'permissions': [('viewable', 'Can view the classroom window. Used for PermissionsRequiredMixin.')], 'verbose_name': 'Classroom Declaration'},
        ),
        migrations.AlterModelOptions(
            name='classroomactionlog',
            options={'permissions': [('viewable', 'Can view the classroom action log window. Used for PermissionRequiredMixin.')], 'verbose_name': 'Classroom Recent Log'},
        ),
        migrations.AlterModelOptions(
            name='course',
            options={'permissions': [('viewable', 'Can view the course window. Used for PermissionsRequiredMixin.')], 'verbose_name': 'Course Declaration'},
        ),
        migrations.AlterModelOptions(
            name='courseschedule',
            options={'permissions': [('viewable', 'Can view the course schedule window. Used for PermissionRequiredMixin.')], 'verbose_name': 'Enlisted Course Schedule'},
        ),
        migrations.AlterModelOptions(
            name='programbranch',
            options={'permissions': [('viewable', 'Can view the program branch window. Used for PermissionsRequiredMixin.')], 'verbose_name': 'Department Program'},
        ),
        migrations.AlterModelOptions(
            name='sectiongroup',
            options={'permissions': [('viewable', 'Can view the section group window. Used for PermissionsRequiredMixin.')], 'verbose_name': 'Student Section'},
        ),
        migrations.AlterField(
            model_name='course',
            name='Course_Capacity',
            field=models.PositiveIntegerField(default=15, help_text='The number of students that can included in the class. Minimum is 15 and Maximum is 45', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(60)], verbose_name='Course Student Capacity'),
        ),
        migrations.AlterField(
            model_name='course',
            name='Course_Code',
            field=models.CharField(help_text='Provide Course Code with Probable In Relation to Course itself.', max_length=10, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.MaxLengthValidator(10)], verbose_name='Course Code'),
        ),
        migrations.AlterField(
            model_name='course',
            name='Course_Name',
            field=models.CharField(help_text='Please indicate. We need to know what type of room is it gonna be.', max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100)], verbose_name='Course Name'),
        ),
        migrations.AlterField(
            model_name='course',
            name='Course_Type',
            field=models.CharField(choices=[('Technological Only', 'Technological Only'), ('Laboratory Only', 'Laboratory Only'), ('External Only', 'External Only'), ('Technological and Laboratory', 'Technological and Laboratory'), ('Technological and External', 'Technological and External'), ('Laboratory and Technological', 'Technological and Laboratory'), ('Laboratory and External', 'External and Laboratory')], default=('Technological Only', 'Technological Only'), help_text='Course Type is dependent, if it needs Laboratory or Technological Only. Please pick properly.', max_length=29, validators=[django.core.validators.MinLengthValidator(13), django.core.validators.MaxLengthValidator(29)], verbose_name='Course Type'),
        ),
        migrations.AlterField(
            model_name='course',
            name='Course_Units',
            field=models.PositiveIntegerField(help_text='Units is indenpendent and user should know it based on lecture time and classroom type to use.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)], verbose_name='Course Units'),
        ),
        migrations.CreateModel(
            name='DeviceOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Device_Output', models.CharField(help_text='The output of the device can be a string, integer, float, or boolean.', max_length=255, verbose_name='Device Referred Output')),
                ('Device_Ref', models.ForeignKey(help_text='Indication of where the data comes from.', on_delete=django.db.models.deletion.CASCADE, to='SCControlSystem.DeviceInfo', to_field='Device_Unique_ID', verbose_name='Device Unique Reference')),
            ],
            options={
                'verbose_name': 'Classroom Device Outputs',
                'db_table': 'dev_decl_output',
            },
        ),
        migrations.AddField(
            model_name='deviceinfo',
            name='Device_Class_Ref',
            field=models.OneToOneField(help_text='Indication of where the device resides.', on_delete=django.db.models.deletion.CASCADE, to='SCControlSystem.Classroom', verbose_name='Classroom Device Assignment'),
        ),
    ]
